// Code generated by "stringer -linecomment -type Class"; DO NOT EDIT.

package sym

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ClassAUTO-1]
	_ = x[ClassEXT-2]
	_ = x[ClassSTAT-3]
	_ = x[ClassREG-4]
	_ = x[ClassLABEL-6]
	_ = x[ClassMOS-8]
	_ = x[ClassARG-9]
	_ = x[ClassSTRTAG-10]
	_ = x[ClassMOU-11]
	_ = x[ClassUNTAG-12]
	_ = x[ClassTPDEF-13]
	_ = x[ClassENTAG-15]
	_ = x[ClassMOE-16]
	_ = x[ClassREGPARM-17]
	_ = x[ClassFIELD-18]
	_ = x[ClassEOS-102]
	_ = x[Class103-103]
}

const (
	_Class_name_0 = "AUTOEXTSTATREG"
	_Class_name_1 = "LABEL"
	_Class_name_2 = "MOSARGSTRTAGMOUUNTAGTPDEF"
	_Class_name_3 = "ENTAGMOEREGPARMFIELD"
	_Class_name_4 = "EOS103"
)

var (
	_Class_index_0 = [...]uint8{0, 4, 7, 11, 14}
	_Class_index_2 = [...]uint8{0, 3, 6, 12, 15, 20, 25}
	_Class_index_3 = [...]uint8{0, 5, 8, 15, 20}
	_Class_index_4 = [...]uint8{0, 3, 6}
)

func (i Class) String() string {
	switch {
	case 1 <= i && i <= 4:
		i -= 1
		return _Class_name_0[_Class_index_0[i]:_Class_index_0[i+1]]
	case i == 6:
		return _Class_name_1
	case 8 <= i && i <= 13:
		i -= 8
		return _Class_name_2[_Class_index_2[i]:_Class_index_2[i+1]]
	case 15 <= i && i <= 18:
		i -= 15
		return _Class_name_3[_Class_index_3[i]:_Class_index_3[i+1]]
	case 102 <= i && i <= 103:
		i -= 102
		return _Class_name_4[_Class_index_4[i]:_Class_index_4[i+1]]
	default:
		return "Class(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
